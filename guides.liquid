---
pagination:
  data: guides
  size: 1
  alias: guide
permalink: "guides/{{ guide.slug }}/"
---
<!DOCTYPE html>
<html lang="en">

  {% include 'head.liquid' %}

  <body>
    {% include 'nav.liquid' %}

    <main id="horizontal">
      <article id="Intro" data-nav-id="Intro">
        <div class="InfoPanel">
          <h3>Explore Your Weekend</h3>
          <h1>{{ guide.title }}</h1>
          <p>{{ guide.description }}</p>

          <div id="onthispage">
            <h3>On this Page</h3>
            <div class="tags">
              {% for location in guide.sections %}
                {%- assign link_href = "#" | append: location.slug -%}
                {% include "components/link.liquid"
                  , href: link_href
                  , text: location.title
                  , button: true %}
              {% endfor %}
            {% comment %} <a href="#FAQ">Frequently Asked Questions<span class="material-symbols-outlined">chevron_right</span>
                                                                                                                                                              </a> {% endcomment %}
            </div>
          </div>
        </div>
        <a class="fwd" href="#{{ guide.sections[0].slug }}">
          {% include 'icon.liquid'
            , name: 'chevron_right' %}
        </a>
      </article>

      {% for location in guide.sections %}
        <article id="{{ location.slug }}">
          {% include "components/image.liquid"
            , slug: location.slug
            , altTags: location.altTags
            , images: location.imageFiles
            , aspect_ratio: "3:4"
            , sizes: "(max-width: 480px) 90vw, (max-width: 768px) 45vw, 30vw"
            , default_width: 362
            , fetchpriority: forloop.first
          %}

          <a
            class="bwd"
            href="#"
            data-nav="bwd">
            {% include 'icon.liquid'
              , name: 'chevron_left' %}
          </a>

          <a
            class="fwd"
            href="#"
            data-nav="fwd">
            {% include 'icon.liquid'
              , name: 'chevron_right' %}
          </a>

          <div class="InfoPanel">
            <h3 itemprop="headline">{{ guide.title }}</h3>

            {%- assign page_href = "/locations/" | append: location.slug | append: "/" -%}

            {% include "components/link.liquid"
              , href: page_href
              , text: location.title
              , tag: 'h2'
            %}

            <p itemprop="description">{{ location.description }}</p>

            <div class="tags" itemprop="keywords">
              {% if location.formattedDistance and location.formattedDistance != '0m' %}
                <div class="tag">{{ location.formattedDistance }} Distance</div>
              {% endif %}
              {% if location.formattedDuration and location.formattedDuration != '0min' %}
                <div class="tag">{{ location.formattedDuration }} Duration</div>
              {% endif %}

              {% for tag in location.formattedTags %}
                <div class="tag">{{ tag.name }}</div>
              {% endfor %}
            </div>

            {%- assign page_href = "/locations/" | append: location.slug | append: "/" -%}

            {% include "components/link.liquid"
              , href: page_href
              , text: "More details"
              , button: true
            %}

          </div>
        </article>
      {% endfor %}

    {% comment %} <article id="FAQ">
                                                                                                                                <div class="InfoPanel">
                                                                                                                                  <h3>{{ guide.title }} Guide</h3>
                                                                                                                                  <h2>FAQ</h2>
                                                                                                                                </div>
                                                                                      </article> {% endcomment %}
    </main>

    <div class="scroll-indicator"></div>

    <script>
      document.addEventListener("DOMContentLoaded", function () {
        const sections = document.querySelectorAll("main#horizontal > article");
        const indicator = document.querySelector(".scroll-indicator");
        const intro = document.querySelector("#Intro");
      
        // Fwd/Bwd Button Logic
        sections.forEach((article, index) => {
          const bwdButton = article.querySelector('[data-nav="bwd"]');
          const fwdButton = article.querySelector('[data-nav="fwd"]');
        
          if (bwdButton) {
            if (index === 1) { // The first location article is at index 1
              bwdButton.href = '#Intro';
            } else if (index > 1) {
              bwdButton.href = '#' + sections[index - 1].id;
            } else {
                bwdButton.style.display = 'none';
            }
          }
        
          if (fwdButton) {
            if (index === sections.length - 2) { // The last location article is the second to last element
              fwdButton.href = '#FAQ';
            } else if (index < sections.length - 2) {
              fwdButton.href = '#' + sections[index + 1].id;
            } else {
              fwdButton.style.display = 'none';
            }
          }
        });
      
        // Scroll Indicator Logic
        if (!sections.length || !indicator || !intro) {
          console.log("Sections, scroll indicator, or #Intro not found.");
          return;
        }
      
        // Initially hide the indicator
        indicator.style.display = "none";
      
        // IntersectionObserver for showing/hiding the indicator
        const introObserver = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                // If #Intro is visible, hide the indicator
                indicator.style.display = "none";
              } else {
                // If #Intro is not visible, show the indicator
                indicator.style.display = "flex";
              }
            });
          },
          {
            threshold: 0.1 // Trigger when a small part of #Intro is visible
          }
        );
      
        // Observe #Intro
        introObserver.observe(intro);
      
        // Generate the segments dynamically
        sections.forEach((section) => {
          const segment = document.createElement("div");
          segment.classList.add("segment");
          
          // Get h1 or h2 content for tooltip
          const h1 = section.querySelector("h1");
          const h2 = section.querySelector("h2");
          const tooltipText = h1 ? h1.textContent : h2 ? h2.textContent : "Section";
      
          // Create and append the tooltip
          const tooltip = document.createElement("span");
          tooltip.classList.add("tooltip");
          tooltip.textContent = tooltipText.trim();
          segment.appendChild(tooltip);
      
          // Add click-to-scroll functionality
          segment.addEventListener("click", () => {
            section.scrollIntoView({ behavior: "smooth", block: "start" });
          });
      
          indicator.appendChild(segment);
        });
      
        // Update the active segment based on scroll
        const observer = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                const activeIndex = [...sections].indexOf(entry.target);
                const segments = document.querySelectorAll(".scroll-indicator .segment");
                
                // Highlight the correct segment
                segments.forEach((seg, index) => {
                  if (index === activeIndex) {
                    seg.classList.add("active");
                  } else {
                    seg.classList.remove("active");
                  }
                });
              }
            });
          },
          {
            threshold: 0.6 // Adjusts how much of a section must be visible to trigger
          }
        );
      
        // Observe each section
        sections.forEach((section) => observer.observe(section));
      });
    </script>

  </body>
</html>