---
permalink: /
---
<!doctype html>
<html lang="en">
  {% include 'head.liquid' %}
  <body class="ind">
    {% include 'nav.liquid' %}
    <main id="vertical">
      <article id="Intro">
        <div class="InfoPanel">
          <h1>Explore Your Weekend</h1>
          <p>Find hikes, lookouts, scenic drives, and breathtaking beaches with ease.</p>
          <div class="search">
            <div class="search-container">
              <input
                type="text"
                class="search-input"
                placeholder="Search your weekend..." />
              <button class="clear-search-button">
                <span class="material-symbols-outlined">
                  close
                </span>
              </button>
            </div>
            <div class="tag-database">
              <div class="filters"></div>
            </div>
            <div class="active-tags-container active-tags"></div>
          </div>
        </div>
      </article>

      <div id="all-content-cards" class="card-grid">
        {% for guide in collections.guides %}
          <article
            class="guide-card"
            id="{{ guide.slug }}"
            itemscope
            itemtype="https://schema.org/CreativeWork">
            <a href="/guides/{{ guide.slug }}/" itemprop="url">
              <picture>
                <source srcset="{{guide.imagePath}}" media="(min-width: 768px), (orientation: landscape)" />
                <img
                  src="{{guide.imagePath}}"
                  alt="{{ guide.title }}"
                  itemprop="image" />
              </picture>
              <div class="InfoPanel">
                <h2 itemprop="headline">{{ guide.title }}</h2>
                <p itemprop="description">{{ guide.description }}</p>
                <div class="tags" itemprop="keywords">
                  {% for tag in guide.formattedTags %}
                    <div class="tag">{{ tag }}</div>
                  {% endfor %}
                </div>
              </div>
            </a>
          </article>
        {% endfor %}
      </div>

      <div id="search-results-container" style="display: none;"></div>
    </main>

    <script src="/assets/js/lunr.js"></script>
    <script>
            (async () => {
              const allContentContainer = document.getElementById('all-content-cards');
              const searchResultsContainer = document.getElementById('search-results-container');
              const searchInput = document.querySelector('.search-input');
              const clearButton = document.querySelector('.clear-search-button');
              
              const searchData = await fetch('/search.json').then(response => response.json());
              const searchIndex = lunr.Index.load(searchData.index);
              const searchStore = searchData.store;
            
              const updateUrl = (query) => {
                  const url = new URL(window.location.href);
                  if (query) url.searchParams.set('q', query);
                  else url.searchParams.delete('q');
                  history.pushState({}, '', url);
              };
            
              const renderResults = (results) => {
                  searchResultsContainer.innerHTML = '';
                  if (!results || results.length === 0) {
                      searchResultsContainer.innerHTML = '<p>No results found.</p>';
                      return;
                  }
            
                  results.forEach(item => {
                      const card = document.createElement('article');
                      card.className = 'search-result-card';
                      
                      const tagsHtml = (item.formattedTags || []).map(tag => `<div class="tag">${tag}</div>`).join('');
            
                      let distanceTag = '';
                      if (item.formattedDistance) {
                        distanceTag = `<div class="tag">${item.formattedDistance}</div>`;
                      }
            
                      let durationTag = '';
                      if (item.formattedDuration) {
                        durationTag = `<div class="tag">${item.formattedDuration}</div>`;
                      }
            
                      const combinedTagsHtml = distanceTag + durationTag + tagsHtml;
            
                      card.innerHTML = `
      <a href="${item.canonicalURL || item.url}">
      <picture>
      <source
      srcset='${item.image}'
      media='(max-width: 768px), (orientation: portrait)'
      onerror='this.onerror=null;this.src="/Images/Springbrook_National_Park.webp";'>
      <img src="${item.image}" alt="${item.title}">
      </picture>
      <div class="InfoPanel">
      <h2>${item.title}</h2>
      <p>${item.description}</p>
      <div class="tags">${combinedTagsHtml}</div>
      </div>
      </a>
      `;
                      searchResultsContainer.appendChild(card);
                  });
              };
            
              const searchAndFilter = () => {
                  const query = searchInput.value.trim();
            
                  if (!query) {
                      allContentContainer.style.display = 'grid';
                      searchResultsContainer.style.display = 'none';
                      return;
                  }
            
                  let lunrQuery = '';
                  const queryWords = query.split(/\s+/).filter(Boolean);
            
                  if (queryWords.length > 0) {
                      const fuzzyQuery = queryWords.map(word => `${word}*`).join(' ');
                      const exactQuery = queryWords.map(word => `${word}`).join(' ');
                      const phraseQuery = `tags:${queryWords.join('')}`;
            
                      lunrQuery = `${fuzzyQuery} ${exactQuery}^10 ${phraseQuery}^50`;
                  }
            
                  let results = [];
                  if (lunrQuery) {
                      results = searchIndex.search(lunrQuery).map(result => searchStore[result.ref]);
                  }
            
                  allContentContainer.style.display = 'none';
                  searchResultsContainer.style.display = 'grid';
                  renderResults(results);
              };
            
              searchInput.addEventListener('input', () => {
                  updateUrl(searchInput.value);
                  searchAndFilter();
              });
            
              clearButton.addEventListener('click', () => {
                  searchInput.value = '';
                  updateUrl('');
                  searchAndFilter();
              });
            
              const initialQuery = new URLSearchParams(window.location.search).get('q');
              if (initialQuery) {
                  searchInput.value = initialQuery;
                  searchAndFilter();
              }
            })();
    </script>
  </body>
</html>